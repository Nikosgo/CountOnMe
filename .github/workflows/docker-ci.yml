name: CountOnMe

on:
  push:
    branches:
      - main
      - janice

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY_URL: 730335643718.dkr.ecr.ap-southeast-1.amazonaws.com
  
  PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  HOST: ${{ secrets.AWS_EC2_HOST }}
  USER: ${{ secrets.AWS_EC2_USER }}
  
  ECR_REPOSITORY: count-on-me/frontend
  ECS_TASK_DEFINITION: aws/taskDefinition.json
  CONTAINER_NAME: CountOnMe-Frontend

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      image_tag: ${{ steps.build-image.outputs.image_tag }}
      
    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 
  
    - name: Checkout code
      uses: actions/checkout@v4
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build -f Dockerfile --platform linux/amd64,linux/arm64 -t $ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG --push .
        echo "image=$ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "image=$ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT


  deploy-frontend-to-ecr:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-frontend.outputs.image }}

  deploy-frontend-to-ec2:
    runs-on: ubuntu-latest
    needs: deploy-frontend-to-ecr
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to EC2
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_NAME: frontend
        run: |
          echo "${{ env.PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ env.USER }}@${{ env.HOST }} <<EOF
            sudo service docker start

            sudo aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URL

            echo "$ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG"
            docker pull $ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG
            docker stop $DOCKER_NAME
            docker rm $DOCKER_NAME
            docker run -d --name $DOCKER_NAME -p 3000:3000 $ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
